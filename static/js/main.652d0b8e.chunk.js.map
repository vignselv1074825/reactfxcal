{"version":3,"sources":["FxCalculator.js","App.js","serviceWorker.js","index.js"],"names":["FxCalculator","props","FxCalculatorClear","e","preventDefault","inputFxRef","current","value","covertingFxRef","setState","result","convertedvalue","USD","inputvalueforconverting","split","inputvalueforconvertingtounit","toUpperCase","inputvalueforconvertingunit","inputvalueforconvertingnumber","parseFloat","alert","parseInt","toFixed","state","React","createRef","Fragment","className","type","placeholder","ref","this","onClick","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4SAqGeA,G,wBAhGX,WAAYC,GAAO,IAAD,8BACd,4CAAMA,KAKVC,kBAAoB,SAACC,GACjBA,EAAEC,iBACF,EAAKC,WAAWC,QAAQC,MAAQ,GAChC,EAAKC,eAAeF,QAAQC,MAAQ,GACpC,EAAKE,SAAS,CAACC,OAAO,MAVR,EAYtBV,aAAe,SAACG,GAEZ,GADAA,EAAEC,iBACoC,KAAlC,EAAKC,WAAWC,QAAQC,OAAgB,EAAKC,eAAeF,QAAQC,MAAO,CAC3E,IAYII,EAZAC,EAAM,CACN,IAAO,MACP,IAAO,MACP,IAAO,KACP,IAAO,OACP,IAAO,OACP,IAAO,KACP,IAAO,MACP,IAAO,MACP,IAAO,MACP,IAAO,OAGPC,EAA0B,EAAKR,WAAWC,QAAQC,MAAMO,MAAM,KAC9DC,EAAgC,EAAKP,eAAeF,QAAQC,MAAMS,cAClEC,EAA8BJ,EAAwB,GAAGG,cACzDE,EAAgCC,WAAWN,EAAwB,IAGvE,GAAII,IAAgCF,EAChCJ,EAAiBO,OACd,GAAoC,QAAhCD,GAA2E,QAAlCF,EAE5CJ,EADgC,QAAhCM,EACiBC,EAAgCN,EAAIG,GAEpCG,EAAgCN,EAAIK,QAGtD,GAAiD,qBAAtCL,EAAIK,IAAgG,qBAAxCL,EAAIG,GAC9EK,MAAM,2BAA6BH,EAA8B,IAAMF,QACpE,GAAIE,IAAgCF,EAA+B,CAEtEJ,EADiCO,EAAgCN,EAAIK,GACvBL,EAAIG,GAEhB,QAAlCA,GAEAJ,EAAiB,oBAAsBI,EAAgC,KADvEJ,EAAiBU,SAASV,IAE1B,EAAKF,SAAS,CACVC,OAAQC,KAEwC,qBAAtCC,EAAIK,IAAgG,qBAAxCL,EAAIG,KAE9EJ,EAAiB,oBAAsBI,EAAgC,KADvEJ,EAAiBA,EAAeW,QAAQ,IAExC,EAAKb,SAAS,CACVC,OAAQC,OAzDhB,EAAKY,MAAQ,CAACb,OAAO,IACrB,EAAKL,WAAamB,IAAMC,YACxB,EAAKjB,eAAiBgB,IAAMC,YAJd,E,sEAmET,IAAD,OACJ,OACI,kBAAC,IAAMC,SAAP,KACA,8BACG,yBAAKC,UAAU,wBACZ,yBAAKA,UAAU,cACZ,yCACA,2BAAOC,KAAK,OAAOD,UAAU,uDACYE,YAAc,UAAUC,IAAKC,KAAK1B,cAE9E,yBAAKsB,UAAU,wCACZ,uCACA,2BAAOC,KAAK,OAAOD,UAAU,yDACeE,YAAc,MAAMC,IAAKC,KAAKvB,kBAE7E,uBAAGmB,UAAU,0BAA0BI,KAAKR,MAAMb,QAClD,yBAAKiB,UAAW,qBACb,4BAAQA,UAAU,8BAA8BK,QAAU,SAAC7B,GAAD,OAAO,EAAKH,aAAaG,KAAnF,UACA,4BAAQwB,UAAU,6BAA8BK,QAAU,SAAC7B,GAAD,OAAO,EAAKD,kBAAkBC,KAAxF,iB,GAtFMqB,IAAMS,YCQlBC,MARf,WACE,OACE,yBAAKP,UAAU,OACb,kBAAC,EAAD,QCKcQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.652d0b8e.chunk.js","sourcesContent":["import React from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './FxCalculator.css';\r\n\r\nclass FxCalculator extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {result:\"\"};\r\n        this.inputFxRef = React.createRef()\r\n        this.covertingFxRef = React.createRef()\r\n    }\r\n    FxCalculatorClear = (e) => {\r\n        e.preventDefault();\r\n        this.inputFxRef.current.value = \"\";\r\n        this.covertingFxRef.current.value = \"\";\r\n        this.setState({result:\"\"});\r\n    }\r\nFxCalculator = (e) => {\r\n    e.preventDefault();\r\n    if (this.inputFxRef.current.value !== \"\" && this.covertingFxRef.current.value) {\r\n        var USD = {\r\n            \"AUD\": 0.8371,\r\n            \"CAD\": 0.8711,\r\n            \"CNY\": 0.1620,\r\n            \"EUR\": 1.2315,\r\n            \"GBP\": 1.5683,\r\n            \"NZD\": 0.7750,\r\n            \"JPY\": 0.0083,\r\n            \"CZK\": 0.0446,\r\n            \"DKK\": 0.1655,\r\n            \"NOK\": 0.1421\r\n        };\r\n        var convertedvalue;\r\n        var inputvalueforconverting = this.inputFxRef.current.value.split(\" \");\r\n        var inputvalueforconvertingtounit = this.covertingFxRef.current.value.toUpperCase();\r\n        var inputvalueforconvertingunit = inputvalueforconverting[0].toUpperCase();\r\n        var inputvalueforconvertingnumber = parseFloat(inputvalueforconverting[1]);\r\n    \r\n    \r\n        if (inputvalueforconvertingunit === inputvalueforconvertingtounit) {\r\n            convertedvalue = inputvalueforconvertingnumber;\r\n        } else if (inputvalueforconvertingunit === \"USD\" || inputvalueforconvertingtounit === \"USD\") {\r\n            if (inputvalueforconvertingunit === \"USD\") {\r\n                convertedvalue = inputvalueforconvertingnumber / USD[inputvalueforconvertingtounit];\r\n            } else {\r\n                convertedvalue = inputvalueforconvertingnumber * USD[inputvalueforconvertingunit];\r\n            }\r\n    \r\n        } else if (typeof(USD[inputvalueforconvertingunit]) === \"undefined\" || typeof(USD[inputvalueforconvertingtounit]) === \"undefined\") {\r\n            alert(\"Unable to find rate for \" + inputvalueforconvertingunit + \"/\" + inputvalueforconvertingtounit);\r\n        } else if (inputvalueforconvertingunit !== inputvalueforconvertingtounit) {\r\n            var usdvalueofconvertingnumber = inputvalueforconvertingnumber * USD[inputvalueforconvertingunit];\r\n            convertedvalue = usdvalueofconvertingnumber / USD[inputvalueforconvertingtounit];\r\n        }\r\n        if (inputvalueforconvertingtounit === \"JPY\") {\r\n            convertedvalue = parseInt(convertedvalue);\r\n            convertedvalue = \"Converted Value: \" + inputvalueforconvertingtounit + \" \" + convertedvalue;\r\n            this.setState({\r\n                result: convertedvalue\r\n            });\r\n        } else if (typeof(USD[inputvalueforconvertingunit]) !== \"undefined\" && typeof(USD[inputvalueforconvertingtounit]) !== \"undefined\") {\r\n            convertedvalue = convertedvalue.toFixed(2);\r\n            convertedvalue = \"Converted Value: \" + inputvalueforconvertingtounit + \" \" + convertedvalue;\r\n            this.setState({\r\n                result: convertedvalue\r\n            });\r\n        }\r\n    \r\n    }\r\n\r\n\r\n}\r\n    render(){\r\n        return(\r\n            <React.Fragment>\r\n            <form>\r\n               <div className=\"Fx-Calculator col-12\">\r\n                  <div className=\"form-group\">\r\n                     <label>From :</label>\r\n                     <input type=\"text\" className=\"form-control \r\n                        Fx-Calculator-Converting-Input-Value\" placeholder = \"AUD 100\" ref={this.inputFxRef}/>\r\n                  </div>\r\n                  <div className=\"form-group Converting-Unit-Container\">\r\n                     <label>To :</label>\r\n                     <input type=\"text\" className=\"form-control\r\n                        Fx-Calculator-Converting-Input-Value-To\" placeholder = \"AUD\" ref={this.covertingFxRef}/>\r\n                  </div>\r\n                  <p className=\"Converted-Value-Result\">{this.state.result}</p>\r\n                  <div className =\"Buttons-Container\">\r\n                     <button className=\"Fx-Calculator-Submit-Button\" onClick ={(e) => this.FxCalculator(e)}>Submit</button>\r\n                     <button className=\"Fx-Calculator-Clear-Button\"  onClick ={(e) => this.FxCalculatorClear(e)}>Clear</button>\r\n                  </div>\r\n               </div>\r\n            </form>\r\n         </React.Fragment>\r\n        )\r\n    \r\n    }\r\n        \r\n}\r\n\r\nexport default FxCalculator;","import React from 'react';\nimport './App.css';\nimport FxCalculator from './FxCalculator';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <FxCalculator/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}